package de.diesner.ehzlogger;

import org.openmuc.jsml.structures.SML_Message;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class TestData {

    public static List<SML_Message> sampleMessage() {
        List<SML_Message> messageList = new ArrayList<>();

        byte[] message = hexStringToByteArray

        DataInputStream is = new DataInputStream(new ByteArrayInputStream(message));

        boolean decodeSuccess;

        do {
            SML_Message smlMessage = new SML_Message();
            try {
                decodeSuccess = smlMessage.decodeAndCheck(is);
                if (decodeSuccess) {
                    messageList.add(smlMessage);
                }
            } catch (IOException e) {
                decodeSuccess = false;
            }
        } while (decodeSuccess);
        return messageList;
    }

    public static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i + 1), 16));
        }
        return data;
    }
}
